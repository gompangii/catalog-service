# curl을 이용하여 API 테스트
# 3.3.2 테스트
curl -X POST -H "Content-Type: application/json" -d '{"author" : "Lyra Silver", "title" : "Northern Lights", "isbn" : "1234567891",  "price" : "9.90" }' http://localhost:38080/books

# 3.3.3 테스트
curl -X POST -H "Content-Type: application/json" -d '{"author" : "Jon Snow", "title" : "", "isbn" : "123ABC456Z",  "price" : "9.90" }' http://localhost:38080/books

# 3.5.1 배포 파이프라인의 커밋 단계 이해
## 그라이프(grype, 취약성 스캐너) 설치 (https://github.com/anchore/grype 참조)
 > curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

# 4.2.1 커맨드라인 이수를 통한 애플리케이션 설정
java -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar --polar.greeting="Welcaome to the catalog from CLI"

# 4.2.2 JVM 시스템 속성을 통해 애플리케이션 구성
java -Dpolar.greeting="Welcaome to the catalog from JVM" -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar
java -Dpolar.greeting="Welcaome to the catalog from JVM" -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar --polar.greeting="Welcaome to the catalog from CLI"

# 4.2.3 환경 변수를 통해 애플리케이션 구성
## 윈도우 cmd 창에서 테스트 할 경우
 > set POLAR_GREETING="Welcaome to the catalog from ENV"
 > java -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar

# 4.4.1 설정 클라이언트 구축
 > java -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar
## prod 환경으로 설정
 > java -jar build/libs/catalog-service-0.0.1-SNAPSHOT.jar --spring.profiles.active=prod


# 5.4.2 플라웨이를 이용한 데이터베이스 스키마 초기화를 위해 삭제한 내용
## schema.sql 파일 내용 플라웨이 적용을 위해 삭제 함
DROP TABLE IF EXISTS book;
CREATE TABLE book (
	id                  INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	author              VARCHAR(255) NOT NULL,
	isbn                VARCHAR(255) NOT NULL UNIQUE,
	price               DOUBLE NOT NULL,
	title               VARCHAR(255) NOT NULL,
	created_date        TIMESTAMP NOT NULL,
    last_modified_date  TIMESTAMP NOT NULL,
	`version`           INT NOT NULL
);

## application.yml 파일에서 플라웨이 적용을 위해 삭제
  sql:
    init:
      mode: always


# 6.2.1-2 서비스 발견을 위한 도커 내장 DNS 서버의 사용
 > docker network create catalog-network
 > docker run -d
    --name polar-postgres \
    --net catalog-network \
    -e POSTGRES_USER=user \
    -e POSTGRES_PASSWORD=password \
    -e POSTGRES_DB=plardb_catalog \
    -p 5432:5432 \
    postgres:14.4

# 6.2.2 도커파일로 스프링 부트 컨테이너화
## docker rum 시 아래처럼 'mariadb.mypc.myvbox' 를 ip로 바꿔서 실행하지 않으면 dns 에러가 남.(mariadb가 도커컨테이너가 아니고 다른 서버나 호스트 서버에 설치 된 경우)
## mariadb를 같은 도커에 컨테이너로 실행한 경우 mariadb 컨테이너명으로 변경해도 됨
 > docker run -d \
    --name catalog-service \
    --net catalog-network \
    -p 9001:9001 \
    -e SPRING_DATASOURCE_URL=jdbc:mariadb://192.168.56.40:3306/polardb_catalog \
    -e SPRING_PROFILES_ACTIVE=testdata \
    catalog-service
## 도커 로그보기
 > docker logs catalog-service
## 도커 컨테이너 삭제
 > docker rm -f catalog-service


# 6.2.4 클라우드 네이티브 빌드팩을 이용한 스프링 부트 컨테이너화 - image registry에 이미지 배포
## gradlew bootBuildImage를 실행하기 위해 도커가 기동 및 로그인되어 있어야 함....
 > ./gradlew bootBuildImage --imageName docker.io/gompangii/catalog-service --publishImage -PregistryUrl=docker.io -PregistryUsername=gompangii -PregistryToken=<token>

# 12.2.1 토큰사용자 지정 및 사용자 역할 전파
## 테스트를 위한 기본 Docker Container 실행
 > docker compose up -d polar-ui polar-keycloak polar-redis

# 12.4.1 스프링 보안 및 스프링 데이터 JDBC를 사용한 데이터 감사
DROP TABLE IF EXISTS book;
CREATE TABLE book (
	id                  INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT,
	author              VARCHAR(255) NOT NULL,
	isbn                VARCHAR(255) NOT NULL UNIQUE,
	price               DOUBLE NOT NULL,
	title               VARCHAR(255) NOT NULL,
	created_date        TIMESTAMP NOT NULL,
    last_modified_date  TIMESTAMP NOT NULL,
    created_by 			VARCHAR(255),
    last_modified_by    VARCHAR(255),
	`version`           INT NOT NULL
);
